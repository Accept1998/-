#include <iostream>
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>
#include <algorithm>
#include <vector>
#include <queue>

using namespace std;

const int maxn=200+5;
const int INF=0x3f3f3f3f;

int n,m,s,t;

struct Edge
{
    int from,to,cap,flow;
};

vector<Edge>edges;
vector<int>G[maxn];
bool vis[maxn];
int d[maxn];
int cur[maxn];

bool BFS()
{
    memset(vis,0,sizeof(vis));
    queue<int>Q;
    Q.push(s);
    d[s]=0;
    vis[s]=1;
    while(!Q.empty())
    {
        int x=Q.front();
        Q.pop();
        int l=G[x].size();
        for(int i=0; i<l; i++ )
        {
            Edge& e=edges[G[x][i]];
            if(!vis[e.to]&&e.cap>e.flow)
            {
                vis[e.to]=1;
                d[e.to]=d[x]+1;
                Q.push(e.to);
            }
        }
    }
    return vis[t];
}

int DFS(int x,int a)
{
    if(x==t||a==0)
        return a;
    int flow=0,f;
    int l=G[x].size();
    for(int& i=cur[x]; i<l; i++)
    {
        Edge&e =edges[G[x][i]];
        if(d[x]+1==d[e.to]&&(f=DFS(e.to,min(a,e.cap-e.flow)))>0)
        {
            e.flow+=f;
            edges[G[x][i]^1].flow-=f;
            flow+=f;
            a-=f;
            if(a==0)
                break;
        }
    }
    return flow;
}

int Maxflow(int s,int t)
{
    int flow=0;
    while(BFS())
    {
        memset(cur,0,sizeof(cur));
        flow+=DFS(s,INF);
    }
    return flow;
}

void AddEdge(int from,int to,int cap)
{
    edges.push_back((Edge){from,to,cap,0});
    edges.push_back((Edge){to,from,0,0});

    int l=edges.size();
    G[from].push_back(l-2);
    G[to].push_back(l-1);
}

int main()
{
    while(scanf("%d %d",&m,&n)!=EOF)
    {
             edges.clear();
        for(int i=0; i<=n; i++)
              G[i].clear();
        int a,b,c;
        s=1,t=n;
        for(int i=0; i<m; i++)
        {
            scanf("%d %d %d",&a,&b,&c);
            AddEdge(a,b,c);

        }
        printf("%d\n",Maxflow(1,n));
    }
    return 0;
}
